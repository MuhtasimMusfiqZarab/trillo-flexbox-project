////////////////////////////////////////
//LOGO
.logo {
  height: 3.25rem;
  margin-left: 2rem;
}

////////////////////////////////////////
//SEARCH
.search {
  // background-color: orangered; // this is for doing the syles of the elements
  // we can use flex properties to flex items
  flex: 0 0 40%;

  //a flex item (search)becoming a flex container here
  display: flex;
  align-items: center; // centers its element along the x axis
  justify-content: center; // centers the element along the Y axis

  @media only screen and (max-width: $bp-smallest) {
    order: 1;
    flex: 0 0 100%;
    background-color: var(
      --color-grey-light-2
    ); // put bg color for entire search element
  }

  &__input {
    //input element doesn't inherit the properties (font-family,font-size etc) of the global document
    font-family: inherit;
    font-size: inherit; // this inherits the header parents fontSize
    color: inherit;
    background-color: var(--color-grey-light-2);
    border: none;
    padding: 0.7rem 2rem; // for (top-bottom & left-right)
    //making this round
    border-radius: 100px; // to a very high number
    width: 90%; // while not clicked
    transition: all 0.2s; // animation should be on the root element
    margin-right: -3.25rem; // this is for putting the button inside of the input

    &:focus {
      outline: none;
      width: 100%; // changing side while focus ( size of parent which is 40%)
      background-color: var(--color-grey-light-3);
    }

    // changing the text color of the placeholder // we use webkit input placeholder sudo element
    &::-webkit-input-placeholder {
      // webkit is the chrome and safary browser

      font-weight: 100;
      color: var(--color-grey-light-4);
    }
  }

  // this changes the background color of both the input & the button while the input is only active
  //button becomes the same background color as the input
  &__input:focus + &__button {
    background-color: var(--color-grey-light-3);
  }

  &__button {
    border: none;
    background-color: var(
      --color-grey-light-2
    ); // want the save background as the input (as it is on the top)

    &:focus {
      //removing the focus from the button
      outline: none;
    }
    &:active {
      transform: translateY(2px); // moving the button down while clicked
    }
  }
  // here we format svg icons==> we just have to set the height and width
  &__icon {
    height: 2rem;
    width: 2rem;
    // the way we added the svg in our app let us change the chage the color of the icon this way
    fill: var(--color-grey-dark-3);
  }
}

////////////////////////////////////////
//USER NAVIGATION

.user-nav {
  // this is for one individual flex item
  // overwriting the parents align-item: center to self ( thus user-navigation wont allign with its other siblings(logo,search)
  align-self: stretch; // navigation takes all the space of the parent

  display: flex; // flex item becomes a flex container
  align-items: center; //vertically centering the items

  //styling all of the direct children of user-nav
  & > * {
    padding: 0 2rem; //(top-bottom, left-right)
    cursor: pointer;
    height: 100%; // takes all the available space
    display: flex;
    align-items: center; // vertically centering
  }
  //styling all of the direct children of user-nav
  & > *:hover {
    background-color: var(--color-grey-light-2);
  }

  &__icon-box {
    position: relative;
  }

  &__icon {
    height: 2.25rem;
    width: 2.25rem;
    fill: var(--color-grey-dark-2); // changing the color of the icon
  }

  &__notification {
    font-size: 0.8rem;
    height: 1.75rem;
    width: 1.75rem;
    border-radius: 50%;
    background-color: var(--color-primary);
    color: #fff;
    //flexbox does not provide us with a way to position an element exactly as we want that
    position: absolute; // thus parents element should be positioned to relative (icon-box)
    // thus positioning on the parent box
    top: 1.5rem;
    right: 1.1rem;

    //for positioning the txt as flexbox not only works for child element but also works for text
    display: flex;
    justify-content: center;
    align-items: center;
  }
  &__user-photo {
    height: 3.75rem;
    // make this round
    border-radius: 50%;
    margin-right: 1rem;
  }
}

//////////////////////////////////////////////////////////////////////////
//////SIDE NAVIGATION

.side-nav {
  font-size: 1.4rem;
  list-style: none; // getting rid of the numbering / point sign
  margin-top: 3.5rem;

  @media only screen and (max-width: $bp-medium) {
    display: flex; // putting elements side by side
    margin: 0; // remove margin arounnd sidebar
  }

  &__item {
    position: relative; // the parent should be relative if the child is positioned as absolute

    // styling except the last child
    &:not(:last-child) {
      margin-bottom: 0.5rem;

      //remove the margin
      @media only screen and (max-width: $bp-medium) {
        margin: 0;
      }
    }

    // items grows as much as they can
    @media only screen and (max-width: $bp-medium) {
      flex: 1;
    }
  }

  // adding psudo-element for hovering effect (small line that with be visible and expands to the right side)
  &__item::before {
    content: ""; // this is for showing the content in the browser
    position: absolute; // positioning absolute relative to the parent
    top: 0;
    left: 0;
    height: 100%; // taking 100% of the parent list item
    width: 3px; // this does not work cox transform scaleY is set to 0
    background-color: var(--color-primary);
    // transition & transform both need to be written together for the effect
    transform: scaleY(0); // not taking any space
    // transform-origin: bottom; // this is set to center by default
    transition: transform 0.2s,
      width 0.4s cubic-bezier(0.84, 0.08, 0.24, 1) 0.3s, background-color 0.1s; // we need this to see the effect // delay between transform & width is .3s
  }

  //--------------chaging style while hovering
  // active state should be as the hover state
  &__item:hover::before,
  &__item--active::before {
    transform: scaleY(1); // taking 100%
    width: 100%; // initially its 3px but on hover takes the whole width
  }

  //changing styles while clicked
  &__item:active::before {
    background-color: var(--color-primary-light);
  }

  // styling the default link style
  &__link:link,
  &__link:visited {
    color: var(--color-grey-light-1);
    text-decoration: none; // getting rid of underline
    text-transform: uppercase;
    display: block; // display as a block/inline block (same)==> this is for the box model
    padding: 1.5rem 3rem;
    // positioning the link to the top (after or before psudo-element)
    position: relative; // z index only works for specified position
    z-index: 20;

    //positioning the icon & text
    display: flex;
    align-items: center;

    @media only screen and (max-width: $bp-medium) {
      justify-content: center;
      padding: 2rem;
    }

    @media only screen and (max-width: $bp-small) {
      flex-direction: column;
      padding: 1.5rem 0.5rem;
    }
  }

  &__icon {
    width: 1.75rem;
    height: 1.75rem;
    margin-right: 2rem;
    fill: currentColor; // this colors the icon as the parent element (side-nav__link)

    @media only screen and (max-width: $bp-small) {
      margin-right: 0;
      margin-bottom: 0.7rem;
      width: 1.5rem;
      height: 1.5rem;
    }
  }
}

//////////////////////////////////////////////////////////////////////////
////// LEGAL TEXT

.legal {
  font-size: 1.2rem;
  color: var(--color-grey-light-4);
  //centering the text in a block
  text-align: center;
  padding: 2.5rem;

  // remove this one
  @media only screen and (max-width: $bp-medium) {
    display: none;
  }
}

//////////////////////////////////////////////////////////////////////////
////// GALLERY

.gallery {
  display: flex; // this always puts element side by side
  &__photo {
    // for responsive design we need width and height in percentages so they stays fluid and they fit inside a given space
    width: 100%;
    display: block;
  }
}

//////////////////////////////////////////////////////////////////////////
//////  HOTEL OVERVIEW

.overview {
  display: flex; // positining child element side by side
  align-items: center; // centering elements in cross(y) axis
  border-bottom: var(--line);

  &__heading {
    font-size: 2.25rem;
    font-weight: 300;
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: 1.5rem 3rem;

    @media only screen and (max-width: $bp-small) {
      font-size: 1.8rem;
      padding: 1.25rem 2rem;
    }
  }
  &__stars {
    // flex: 1; // flex item grows and occupy all the available space // we cant use it because we dont want the box to have occupy the whole available space
    margin-right: auto; // thus we use margin-right to auto (instead of flex:1 because the background takes the whole space)
    display: flex; // removing the white-space as svg elements works as inline elements giving space around it
  }
  &__icon-star,
  &__icon-location {
    width: 1.75rem;
    height: 1.75rem;
    fill: var(--color-primary); // adding the color
  }
  &__location {
    font-size: 1.2rem;
    display: flex;
    align-items: center; // vertical allign
  }

  &__icon-location {
    margin-right: 0.5rem;
  }

  &__rating {
    background-color: var(--color-primary);
    color: #fff;
    margin-left: 3rem;
    padding: 0 2.25rem;
    // stretching all the way (up and down) of the parent container
    align-self: stretch; // this overrides allign-items center from the parent
    display: flex;
    flex-direction: column;
    align-items: center; // vertically allign
    justify-content: center; // centering all the items of the container

    @media only screen and (max-width: $bp-small) {
      padding: 0 1.5rem;
    }
  }
  &__rating-average {
    font-size: 2.25rem;
    font-weight: 300;
    margin-bottom: -3px;

    @media only screen and (max-width: $bp-small) {
      font-size: 1.8rem;
    }
  }
  &__rating-count {
    font-size: 0.8rem;
    text-transform: uppercase;

    @media only screen and (max-width: $bp-small) {
      font-size: 0.5rem;
    }
  }
}

//////////////////////////////////////////////////////////
///// BUTTON INLINE

.btn-inline {
  border: none; // removing the button border
  color: var(--color-primary);
  font-size: inherit; // to make this button moduler(reusable)
  border-bottom: 1px solid currentColor; // color is exact as the text
  padding-bottom: 2px;
  display: inline-block; // the default is inline
  background-color: transparent;
  cursor: pointer;
  transition: all 0.2s; //animation

  // this is the show all button
  & span {
    margin-left: 3px;
    transition: margin-left 0.2s; // animate this // animation must be in the parent element
  }

  &:hover {
    color: var(--color-grey-dark-1); // border also updates as well

    //span tag of the buttion
    span {
      margin-left: 8px; // change while hovered
    }
  }

  // while clicked (and focus is on it)the button
  &:focus {
    outline: none; // removes default blue border
    animation: pulsate 1s infinite;
  }
}

// here is the keyframe animation
@keyframes pulsate {
  0% {
    transform: scale(1);
    box-shadow: none;
  }
  50% {
    transform: scale(1.05);
    box-shadow: 0 1rem 4rem rgba(0, 0, 0, 0.25);
  }
  100% {
    transform: scale(1);
    box-shadow: none;
  }
}

//////////////////////////////////////////////////////////
///// PARAGRAPH
.paragraph:not(:last-of-type) {
  margin-bottom: 2rem;
}

//////////////////////////////////////////////////////////
///// LIST
.list {
  list-style: none;
  margin: 3rem 0;
  padding: 3rem 0;
  border-top: var(--line);
  border-bottom: var(--line);

  // putting the list side by side
  display: flex;
  flex-wrap: wrap; // wrap the elements to new line if not there is not enough space

  //giving items a fixed width
  &__item {
    flex: 0 0 50%; // we want 2 elements side by side
    margin-bottom: 0.7rem;
  }

  // this is created before each of the icon elements is created (used for the list icon)
  &__item::before {
    // we always have to specify the content property
    content: "";
    display: inline-block; // this lets us provide height and width
    // need to specify the height and width
    height: 1rem;
    width: 1rem;
    margin-right: 0.7rem;

    // For older browsers // cant change the color //relative to compiled css file
    // background-image: url(../img/chevron-thin-right.svg);
    // background-size: cover;

    //Newer Browsers --masks (a mask defines an area where we can look through an element & see whats behind the element)
    background-color: var(--color-primary);
    //look through the icon to see the background color (the rest will be coverd)
    -webkit-mask-image: url(../img/chevron-thin-right.svg);
    mask-image: url(../img/chevron-thin-right.svg); // for compability issue
    -webkit-mask-size: cover; // behaves as backgroung size (icon covers the entire element)
    mask-size: cover; // compability issue (icon is larger than the icon size thus we need this)
  }
}

//////////////////////////////////////////////////////////
///// RECOMMEND
.recommend {
  font-size: 1.3rem;
  color: var(--color-grey-dark-3);

  display: flex;
  align-items: center; // center vertically

  &__count {
    margin-right: auto; // takes the whole available space
  }

  //we want the photos to be side by side
  &__friends {
    display: flex;
  }

  &__photo {
    // content box adds border to be added on top of height and width
    // content box is the default thus the 4rem 4rem image size defined is not changed
    box-sizing: content-box; // border-box :includes padding and border into the width & height of the element
    height: 4rem;
    width: 4rem;
    border-radius: 50%;
    border: 3px solid #fff;

    //overlapping on top of other
    &:not(:last-child) {
      margin-right: -2rem;
    }
  }
}

//////////////////////////////////////////////////////////
///// REVIEWS

.review {
  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  margin-bottom: 3.5rem;
  position: relative;
  // solving the qoute not to overflow the box
  overflow: hidden;

  @media only screen and (max-width: $bp-medium) {
    padding: 2rem;
    margin-bottom: 3rem;
  }

  &__text {
    margin-bottom: 2rem;
    z-index: 20;
    // z index only works if you set the position
    position: relative;
  }

  &__user {
    display: flex;
    align-items: center;
  }

  &__photo {
    height: 4.5rem;
    width: 4.5rem;
    border-radius: 50%;
    margin-right: 1.5rem;
  }
  &__user-box {
    margin-right: auto;
  }
  &__user-name {
    font-size: 1.1rem;
    font-weight: 600;
    text-transform: uppercase;
    margin-bottom: 0.4rem;
  }
  &__user-date {
    font-size: 1rem;
    color: var(--color-grey-dark-3);
  }
  &__user-rating {
    color: var(--color-primary);
    font-size: 2.2rem;
    font-weight: 300;
  }

  //adding the quatation in the review box
  &::before {
    content: "\201C";
    position: absolute; // right in the corner of the element (parent should be relative)
    top: -2.75rem; // 2 rem up from the top
    left: -1rem;
    line-height: 1;
    font-size: 20rem;
    color: var(--color-grey-light-2);
    font-family: sans-serif; // for changing the quatation style (default was open-sans)
    z-index: 1;
  }
}

//////////////////////////////////////////////////////////
///// CALL TO ACTION
.cta {
  padding: 3.5rem 0;
  text-align: center; // centering text and button

  @media only screen and (max-width: $bp-medium) {
    padding: 2.5rem 0;
  }

  &__book-now {
    font-size: 2rem;
    font-weight: 300;
    text-transform: uppercase;
    margin-bottom: 2.5rem;
  }
}

//////////////////////////////////////////////////////////
///// CALL TO ACTION

.btn {
  font-size: 1.5rem;
  font-weight: 300;
  text-transform: uppercase;
  border-radius: 100px;
  border: none;
  background-image: linear-gradient(
    to right,
    var(--color-primary-light),
    var(--color-primary-dark)
  );
  color: #fff;
  position: relative; // this is to position the child to a absolute positoin
  overflow: hidden; // hide the button content which falls outside the box(button)

  // selecting all of the child elements
  & > * {
    // span is an inline element (we need inline-block)==> so that we can use padding in there
    display: inline-block;
    // inheriting height and width of its parent element (this is needed for the transition)
    height: 100%;
    width: 100%;
    transition: all 0.2s; // visible it while hovered with animation // transition does not work for background images/ gradient
  }

  &__visible {
    padding: 2rem 7.5rem;
  }

  &__invisible {
    position: absolute; // to put it outside of the button
    padding: 2rem 0;
    left: 0;
    top: -100%; // move it up exactly of its size
  }

  &:hover {
    background-image: linear-gradient(
      to left,
      var(--color-primary-light),
      var(--color-primary-dark)
    );
  }

  // buton animation
  &:hover &__visible {
    // we cant use top because we didnot use absolute positining on it
    transform: translateY(100%);
  }
  &:hover &__invisible {
    top: 0;
  }

  &:focus {
    outline: none;
    animation: pulsate 1s infinite;
  }
}
